// Copyright (c) 2018-present Anbillon Team (anbillonteam@gmail.com).
// Code generated by sqlbrick. DO NOT EDIT IT.

// This file is generated from: user.sql

package models

import (
	"database/sql"

	"github.com/jmoiron/sqlx"
)

// Type definition for User which defined in sql file.
// This can be used as a model in database operation.
type User struct {
	Id   int    `db:"id"`
	Name string `db:"name"`
	Age  int    `db:"age"`
}

// Type definition for UserBrick. This brick will contains all database
// operation from given sql file. Each sql file will have only one brick.
type UserBrick struct {
	db *sqlx.DB
}

// newUserBrick will create a User brick. This is used
// invoke the query function generated from sql file.
func newUserBrick(db *sqlx.DB) *UserBrick {
	return &UserBrick{db: db}
}

// CreateTable generated by sqlbrick, used to operate database table.
func (b *UserBrick) CreateTable() sql.Result {
	return b.db.MustExec(`CREATE TABLE IF NOT EXISTS user (
id int NOT NULL PRIMARY KEY,
name text NOT NULL,
age int NOT NULL
)`)
}

// SelectById generated by sqlbrick, select data from database.
func (b *UserBrick) SelectById(dest interface{}, id interface{}) error {
	stmt, err := b.db.PrepareNamed(
		`SELECT * FROM user WHERE id = :id`)
	if err != nil {
		return err
	}

	rows, err := stmt.Queryx(id)
	if err != nil {
		return err
	}
	return rows.StructScan(dest)
}
