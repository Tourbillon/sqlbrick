// Copyright (c) 2018-present Anbillon Team (anbillonteam@gmail.com).
// Code generated by sqlbrick. DO NOT EDIT IT.

// This file is generated from: book.sql

package models

import (
	"database/sql"

	"anbillon.com/sqlbrick/typex"
	"github.com/jmoiron/sqlx"
)

// Type definition for Book which defined in sql file.
// This can be used as a model in database operation.
type Book struct {
	Id         int32          `db:"id"`
	Uid        int            `db:"uid"`
	Name       string         `db:"name"`
	Content    sql.NullString `db:"content"`
	CreateTime typex.NullTime `db:"create_time"`
	Price      int            `db:"price"`
}

// Type definition for BookBrick. This brick will contains all database
// operation from given sql file. Each sql file will have only one brick.
type BookBrick struct {
	db *sqlx.DB
}

// newBookBrick will create a Book brick. This is used
// invoke the query function generated from sql file.
func newBookBrick(db *sqlx.DB) *BookBrick {
	return &BookBrick{db: db}
}

// CreateBook generated by sqlbrick, used to operate database table.
func (b *BookBrick) CreateBook() sql.Result {
	return b.db.MustExec(`CREATE TABLE IF NOT EXISTS book (
  "id"  serial NOT NULL PRIMARY KEY,
  uid int NOT NULL,
  name text NOT NULL,
  content varchar(255),
  create_time TIMESTAMP,
  price int NOT NULL
)`)
}

// InsertOne generated by sqlbrick, insert data into database.
func (b *BookBrick) InsertOne(args *Book) (sql.Result, error) {
	stmt, err := b.db.PrepareNamed(
		`INSERT INTO book (uid, name, content, create_time, price)
  VALUES (:uid, :name, :content, :create_time, :price)`)
	if err != nil {
		return nil, err
	}
	return stmt.Exec(args)
}

// UpdatePrice An example to show update price.
func (b *BookBrick) UpdatePrice(args *Book) (sql.Result, error) {
	var conditionQuery string

	conditionQuery += `UPDATE book SET `
	if args.Price > 0 {
		conditionQuery += `price = :price,`
	}
	conditionQuery += ` `
	if args.Content.String != "" {
		conditionQuery += `content = :content,`
	}
	conditionQuery += `name = :name WHERE id = :id `
	stmt, err := b.db.PrepareNamed(conditionQuery)

	if err != nil {
		return nil, err
	}
	return stmt.Exec(args)
}

// ComplexUpdate An example to show complex update. Second line comment.
func (b *BookBrick) ComplexUpdate(args *Book) (sql.Result, error) {
	stmt, err := b.db.PrepareNamed(
		`UPDATE book SET price=(SELECT price FROM book, user WHERE book.uid=user.id)
  WHERE book.price <= :price AND name = :name`)
	if err != nil {
		return nil, err
	}
	return stmt.Exec(args)
}

// SelectAll generated by sqlbrick, select data from database.
func (b *BookBrick) SelectAll(dest interface{}) error {
	return b.db.Select(dest, `SELECT * FROM book`)
}

// SelectById An example to show SelectById.
func (b *BookBrick) SelectById(dest interface{}, id interface{}) error {
	stmt, err := b.db.PrepareNamed(
		`SELECT * FROM book WHERE id = :id ORDER BY name ASC`)
	if err != nil {
		return err
	}

	// create map arguments for sqlx
	args := map[string]interface{}{
		"id": id,
	}

	row := stmt.QueryRowx(args)
	if row.Err() != nil {
		return row.Err()
	}

	return row.StructScan(dest)

}

// SelectByUid generated by sqlbrick, select data from database.
func (b *BookBrick) SelectByUid(dest interface{}, uid interface{}) error {
	stmt, err := b.db.PrepareNamed(
		`SELECT * FROM book WHERE uid = :uid ORDER BY name ASC`)
	if err != nil {
		return err
	}

	// create map arguments for sqlx
	args := map[string]interface{}{
		"uid": uid,
	}

	rows, err := stmt.Queryx(args)
	if err != nil {
		return err
	}

	return sqlx.StructScan(rows, dest)
}

// DeleteById An example to show DeleteById.
func (b *BookBrick) DeleteById(id interface{}) (sql.Result, error) {
	stmt, err := b.db.PrepareNamed(`DELETE FROM book WHERE id = :id`)
	if err != nil {
		return nil, err
	}

	// create map arguments for sqlx
	args := map[string]interface{}{
		"id": id,
	}

	return stmt.Exec(args)
}
