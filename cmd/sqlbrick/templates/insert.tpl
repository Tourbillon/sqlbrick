// {{ .FuncName }} {{ if eq .Comment "" }}generated by sqlbrick, insert data into database.
{{- else -}}
{{ .Comment }}
{{- end }}
{{ if .IsTx -}}
func (b *{{ .BrickName }}BrickTx){{ .FuncName }}(args *entity.{{ .BrickName }}) (sql.Result, error) {
{{ else -}}
func (b *{{ .BrickName }}Brick){{ .FuncName }}(args *entity.{{ .BrickName }}) (sql.Result, error) {
{{- end -}}
    {{ if .IsTx -}}
    if err := b.checkTx(); err != nil {
        return nil, err
    }

    stmt, err := b.tx.PrepareNamed(
        `{{ index .Segments 0 }}`)
    if err != nil {
        return nil, err
    }

    if result, err := stmt.Exec(args); err != nil {
        if rbe := b.tx.Rollback(); rbe != nil {
            return nil, rbe
        }
        return nil, err
    } else {
        return result, nil
    }
    {{- else -}}
    stmt, err := b.db.PrepareNamed(
        `{{ index .Segments 0 }}`)
    if err != nil {
        return nil, err
    }
    return stmt.Exec(args)
    {{- end }}
}
